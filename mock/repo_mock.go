// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/acoustid/priv (interfaces: Catalog,Repository,Account,Service)

// Package mock is a generated GoMock package.
package mock

import (
	priv "github.com/acoustid/priv"
	chromaprint "github.com/acoustid/go-acoustid/chromaprint"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCatalog is a mock of Catalog interface
type MockCatalog struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogMockRecorder
}

// MockCatalogMockRecorder is the mock recorder for MockCatalog
type MockCatalogMockRecorder struct {
	mock *MockCatalog
}

// NewMockCatalog creates a new mock instance
func NewMockCatalog(ctrl *gomock.Controller) *MockCatalog {
	mock := &MockCatalog{ctrl: ctrl}
	mock.recorder = &MockCatalogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCatalog) EXPECT() *MockCatalogMockRecorder {
	return m.recorder
}

// CreateCatalog mocks base method
func (m *MockCatalog) CreateCatalog() error {
	ret := m.ctrl.Call(m, "CreateCatalog")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCatalog indicates an expected call of CreateCatalog
func (mr *MockCatalogMockRecorder) CreateCatalog() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCatalog", reflect.TypeOf((*MockCatalog)(nil).CreateCatalog))
}

// CreateTrack mocks base method
func (m *MockCatalog) CreateTrack(arg0 string, arg1 *chromaprint.Fingerprint, arg2 priv.Metadata) error {
	ret := m.ctrl.Call(m, "CreateTrack", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrack indicates an expected call of CreateTrack
func (mr *MockCatalogMockRecorder) CreateTrack(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrack", reflect.TypeOf((*MockCatalog)(nil).CreateTrack), arg0, arg1, arg2)
}

// DeleteCatalog mocks base method
func (m *MockCatalog) DeleteCatalog() error {
	ret := m.ctrl.Call(m, "DeleteCatalog")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCatalog indicates an expected call of DeleteCatalog
func (mr *MockCatalogMockRecorder) DeleteCatalog() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCatalog", reflect.TypeOf((*MockCatalog)(nil).DeleteCatalog))
}

// DeleteTrack mocks base method
func (m *MockCatalog) DeleteTrack(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteTrack", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrack indicates an expected call of DeleteTrack
func (mr *MockCatalogMockRecorder) DeleteTrack(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrack", reflect.TypeOf((*MockCatalog)(nil).DeleteTrack), arg0)
}

// Exists mocks base method
func (m *MockCatalog) Exists() (bool, error) {
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockCatalogMockRecorder) Exists() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCatalog)(nil).Exists))
}

// Name mocks base method
func (m *MockCatalog) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockCatalogMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCatalog)(nil).Name))
}

// NewTrackID mocks base method
func (m *MockCatalog) NewTrackID() string {
	ret := m.ctrl.Call(m, "NewTrackID")
	ret0, _ := ret[0].(string)
	return ret0
}

// NewTrackID indicates an expected call of NewTrackID
func (mr *MockCatalogMockRecorder) NewTrackID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTrackID", reflect.TypeOf((*MockCatalog)(nil).NewTrackID))
}

// Search mocks base method
func (m *MockCatalog) Search(arg0 *chromaprint.Fingerprint, arg1 *priv.SearchOptions) (*priv.SearchResults, error) {
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*priv.SearchResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockCatalogMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCatalog)(nil).Search), arg0, arg1)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Account mocks base method
func (m *MockRepository) Account() priv.Account {
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(priv.Account)
	return ret0
}

// Account indicates an expected call of Account
func (mr *MockRepositoryMockRecorder) Account() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockRepository)(nil).Account))
}

// Catalog mocks base method
func (m *MockRepository) Catalog(arg0 string) priv.Catalog {
	ret := m.ctrl.Call(m, "Catalog", arg0)
	ret0, _ := ret[0].(priv.Catalog)
	return ret0
}

// Catalog indicates an expected call of Catalog
func (mr *MockRepositoryMockRecorder) Catalog(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Catalog", reflect.TypeOf((*MockRepository)(nil).Catalog), arg0)
}

// MockAccount is a mock of Account interface
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
}

// MockAccountMockRecorder is the mock recorder for MockAccount
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// Repository mocks base method
func (m *MockAccount) Repository() priv.Repository {
	ret := m.ctrl.Call(m, "Repository")
	ret0, _ := ret[0].(priv.Repository)
	return ret0
}

// Repository indicates an expected call of Repository
func (mr *MockAccountMockRecorder) Repository() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repository", reflect.TypeOf((*MockAccount)(nil).Repository))
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetAccountByApiKey mocks base method
func (m *MockService) GetAccountByApiKey(arg0 string) (priv.Account, error) {
	ret := m.ctrl.Call(m, "GetAccountByApiKey", arg0)
	ret0, _ := ret[0].(priv.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByApiKey indicates an expected call of GetAccountByApiKey
func (mr *MockServiceMockRecorder) GetAccountByApiKey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByApiKey", reflect.TypeOf((*MockService)(nil).GetAccountByApiKey), arg0)
}
